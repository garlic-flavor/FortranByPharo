"
I am generated by SWAnalyzer.
I have informations about Pharo's method.
"
Class {
	#name : #SWMethodInfo,
	#superclass : #Object,
	#instVars : [
		'method',
		'mangledName',
		'variables',
		'return'
	],
	#category : #'SWFortranByPharo-Client-Analyzer'
}

{ #category : #private }
SWMethodInfo class >> mangledTypeNameOf: aType [
	aType = Integer ifTrue: [ ^ #i ].
	aType = Float ifTrue: [ ^ #d ].
	^ #_
]

{ #category : #'instance creation' }
SWMethodInfo class >> newWith: method [
	^ self new
		method: method;
		yourself
]

{ #category : #testing }
SWMethodInfo >> hasExplicitReturn [
	^ self returnValue value class ~= self  method methodClass
]

{ #category : #accessing }
SWMethodInfo >> mangledName [

	^ mangledName ifNil: [ mangledName := String streamContents: [ : s ||owner|
		owner := self method methodClass.
		owner class = Metaclass ifTrue: [ 
			s << owner soleInstance name; << 'C'
		] ifFalse: [
			s << owner name; << '_'
		].
		s << self method selector; << (self const ifTrue: ['C'] ifFalse: ['_']).
		self variables from: 1 to: self method numArgs do: [ :var |
			self class mangledTypeNameOf: var value class
		]
	] ]
]

{ #category : #accessing }
SWMethodInfo >> mangledName: anObject [

	mangledName := anObject
]

{ #category : #accessing }
SWMethodInfo >> method [

	^ method
]

{ #category : #accessing }
SWMethodInfo >> method: anObject [

	method := anObject
]

{ #category : #accessing }
SWMethodInfo >> name [

	^ self method selector asString
]

{ #category : #accessing }
SWMethodInfo >> return [

	^ return
]

{ #category : #accessing }
SWMethodInfo >> return: anObject [

	return := anObject
]

{ #category : #accessing }
SWMethodInfo >> variables [

	^ variables ifNil: [ variables :=  self method temporaryVariables withIndexCollect: [ :var :idx |
		SWVariableInfo new
			name: var name;
			stackPos: idx;
			const: true;
			yourself
	]]
]

{ #category : #accessing }
SWMethodInfo >> variables: anObject [

	variables := anObject
]
