"
I am generated by SWAnalyzer.
I have informations about Pharo's method.
"
Class {
	#name : #SWMethodInfo,
	#superclass : #Object,
	#instVars : [
		'owner',
		'name',
		'mangledName',
		'explicitReturnType',
		'argumentTypes',
		'variables',
		'const'
	],
	#category : #'SWFortranByPharo-Client-Transpiler'
}

{ #category : #accessing }
SWMethodInfo >> argumentTypes [

	^ argumentTypes ifNil: [ argumentTypes := OrderedCollection new ]
]

{ #category : #accessing }
SWMethodInfo >> argumentTypes: anObject [

	argumentTypes := anObject
]

{ #category : #accessing }
SWMethodInfo >> explicitReturnType [

	^ explicitReturnType
]

{ #category : #accessing }
SWMethodInfo >> explicitReturnType: anObject [

	explicitReturnType := anObject
]

{ #category : #testing }
SWMethodInfo >> hasReturn [
	^ self explicitReturnType isNotNil
]

{ #category : #accessing }
SWMethodInfo >> mangledName [

	^ mangledName
]

{ #category : #accessing }
SWMethodInfo >> mangledName: anObject [

	mangledName := anObject
]

{ #category : #accessing }
SWMethodInfo >> name [

	^ name
]

{ #category : #accessing }
SWMethodInfo >> name: anObject [

	name := anObject
]

{ #category : #accessing }
SWMethodInfo >> owner [

	^ owner
]

{ #category : #accessing }
SWMethodInfo >> owner: anObject [

	owner := anObject
]

{ #category : #accessing }
SWMethodInfo >> returnType [

	^ self explicitReturnType  ifNil: [ self owner ]
]

{ #category : #accessing }
SWMethodInfo >> variables [

	^ variables ifNil: [ variables := Dictionary new ]
]

{ #category : #accessing }
SWMethodInfo >> variables: anObject [

	variables := anObject
]
